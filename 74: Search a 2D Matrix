class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        trow = 0
        brow = len(matrix)-1
        frow = -1
        while trow <= brow:
            mid = trow + (brow-trow)//2
            if matrix[mid][0] <= target <= matrix[mid][-1]:
                frow=mid
                break
            elif target < matrix[mid][0]:
                brow=mid-1
            else:
                trow=mid+1
        if frow == -1:
            return False
        l=0
        r=len(matrix[0])-1
        while l <= r:
            mid = l + (r-l)//2
            if target == matrix[frow][mid]:
                return True
            elif target < matrix[frow][mid]:
                r=mid-1
            else:
                l=mid+1
        return False

'''
This is a 2-level binary search pattern:

Use binary search to narrow down the row.

Use binary search inside the found row.

Alternatively, you can flatten the matrix into a 1D virtual array and binary search directly. Let me know if you want to explore that pattern too.
'''
