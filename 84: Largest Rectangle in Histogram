class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        maxArea=0
        stack = [] #pair(idx.height)
        for i, h in enumerate(heights):
            start=i
            while stack and stack[-1][1] > h:
                idx,height = stack.pop()
                maxArea = max(maxArea, height*(i-idx))
                start = idx
            stack.append((start,h))
        for i,h in stack:
            maxArea = max(maxArea, h* (len(heights)-i))
        return maxArea

'''
ðŸ§© Patterns & Concepts
Monotonic stack (Increasing heights)

Think in terms of:

When to push? When the height is increasing.

When to pop and calculate? When we see a smaller height than the top of the stack.

Each bar acts as the smallest bar of some rectangle
'''
